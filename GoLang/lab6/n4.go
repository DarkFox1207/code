package main

import (
	"fmt"
	"sync"
	"time"
)

var (
	counter int            // Общая переменная-счётчик
	mutex   sync.Mutex     // Мьютекс для синхронизации доступа к счётчику
	wg      sync.WaitGroup // Группа ожидания для завершения всех горутин
)

// Функция для увеличения счётчика
func incrementCounter(id int) {
	defer wg.Done() // Сообщаем о завершении горутины

	for i := 0; i < 5; i++ {
		// Закомментировать строку ниже для отключения мьютексов
		mutex.Lock() // Блокировка доступа к счётчику
		counter++    // Увеличение счётчика
		fmt.Printf("Горутина %d увеличила счётчик до %d\n", id, counter)
		// Закомментировать строку ниже для отключения мьютексов
		mutex.Unlock() // Разблокировка доступа к счётчику

		time.Sleep(100 * time.Millisecond) // Имитация работы
	}
}

func main() {
	// Запускаем несколько горутин для увеличения счётчика
	for i := 1; i <= 5; i++ {
		wg.Add(1)
		go incrementCounter(i)
	}

	wg.Wait() // Ожидаем завершения всех горутин
	fmt.Printf("Финальное значение счётчика: %d\n", counter)
}

//Если закомментировать вызовы mutex.Lock() и mutex.Unlock(), произойдёт гонка данных — несколько горутин одновременно будут пытаться изменить переменную counter, и это приведёт к некорректным результатам.
